openapi: 3.0.1
info:
   title: Eclipse Honoâ„¢ Device Registry API
   description: |
      This API allows one to interact with the Eclipse Hono Device Registry
      API. It acts as a common basis which all Hono device registries should
      implement.
   license:
      name: EPL-2.0
      url: https://www.eclipse.org/legal/epl-2.0/
   version: 0.9.0

externalDocs:
   description: Eclipse Hono homepage
   url: https://eclipse.org/hono

tags:
   - name: tenant
     description: Tenant Management
     externalDocs:
        description: Hono Multi-Tenancy
        url: https://www.eclipse.org/hono/concepts/tenancy/
   - name: registration
     description: Device registration
     externalDocs:
        description: Hono device identity
        url: https://www.eclipse.org/hono/concepts/device-identity/
   - name: credentials
     description: Device credentials
     externalDocs:
        description: Hono device identity
        url: https://www.eclipse.org/hono/concepts/device-identity/

servers:
   - url: '{corsProxy}{server}/'
     variables:
        server:
           default: http://hono.eclipse.org:28080
        corsProxy:
           default: https://cors-anywhere.herokuapp.com/

paths:

# Tenant API

   /tenant:
      post:
         tags:
            - tenant
         summary: Create new tenant
         operationId: createTenant
         requestBody:
            description: New tenant registration
            content:
               application/json:
                  schema:
                     $ref: '#/components/schemas/TenantCreate'
            required: true
         responses:
            201:
               description: device registered
            400:
               description: malformed request
            403:
               description: operation not allowed
            409:
               description: device already registered

   /tenant/{tenant}:
      get:
         tags:
            - tenant
         summary: Get tenant information
         operationId: getTenant
         parameters:
            - $ref: '#/components/parameters/tenant'
         responses:
            200:
               description: operation successful
               content:
                  application/json:
                     schema:
                        $ref: '#/components/schemas/TenantCreate'
            400:
               description: malformed request
            403:
               description: operation not allowed
            404:
               description: tenant not found
      put:
         tags:
            - tenant
         summary: Update tenant information
         operationId: updateTenant
         parameters:
            - $ref: '#/components/parameters/tenant'
         requestBody:
            description: Tenant information
            content:
               application/json:
                  schema:
                     $ref: '#/components/schemas/TenantData'
            required: true
         responses:
            204:
               description: tenant updated
            400:
               description: malformed request
            403:
               description: operation not allowed
            404:
               description: tenant not found
      delete:
         tags:
            - tenant
         summary: Delete tenant
         operationId: deleteTenant
         parameters:
            - $ref: '#/components/parameters/tenant'
         responses:
            204:
               description: tenant deleted
            403:
               description: operation not allowed
            404:
               description: tenant not found

# Registration API

   /registration/{tenant}:
      post:
         tags:
            - registration
         summary: Create new device registration
         operationId: createRegistration
         parameters:
            - $ref: '#/components/parameters/tenant'
         requestBody:
            description: New device registration
            content:
               application/json:
                  schema:
                     $ref: '#/components/schemas/RegistrationCreate'
            required: true
         responses:
            201:
               description: device registered
            400:
               description: malformed request
            403:
               description: operation not allowed
            409:
               description: device already registered

   /registration/{tenant}/{deviceId}:
      get:
         tags:
            - registration
         summary: Get device registration information
         operationId: getRegistration
         parameters:
            - $ref: '#/components/parameters/tenant'
            - $ref: '#/components/parameters/deviceId'
         responses:
            200:
               description: operation successful
               content:
                  application/json:
                     schema:
                        $ref: '#/components/schemas/RegistrationGet'
            400:
               description: malformed request
            403:
               description: operation not allowed
            404:
               description: device not found
      put:
         tags:
            - registration
         summary: Update existing device registration
         operationId: updateRegistration
         parameters:
            - $ref: '#/components/parameters/tenant'
            - $ref: '#/components/parameters/deviceId'
         requestBody:
            description: Updated device registration
            content:
               application/json:
                  schema:
                     $ref: '#/components/schemas/RegistrationData'
            required: true
         responses:
            204:
               description: device registration updated
            400:
               description: malformed request
            403:
               description: operation not allowed
            404:
               description: device not found
      delete:
         tags:
            - registration
         summary: Delete device registration
         operationId: deleteRegistration
         parameters:
            - $ref: '#/components/parameters/tenant'
            - $ref: '#/components/parameters/deviceId'
         responses:
            204:
               description: device deleted
            403:
               description: operation not allowed
            404:
               description: device not found

# Credentials API

   /credentials/{tenant}/{authId}/{secretType}:
      get:
         tags:
            - credentials
         summary: Get specific authentication credentials
         operationId: getAuthCredentials
         parameters:
            - $ref: '#/components/parameters/tenant'
            - $ref: '#/components/parameters/authId'
            - $ref: '#/components/parameters/secretType'
         responses:
            200:
               description: operation successful
               content:
                  application/json:
                     schema:
                        $ref: '#/components/schemas/Credentials'
            400:
               description: malformed request
            403:
               description: operation not allowed
            404:
               description: device not found
      put:
         tags:
            - credentials
         summary: Update specific credentials set
         operationId: updateAuthCredentials
         parameters:
            - $ref: '#/components/parameters/tenant'
            - $ref: '#/components/parameters/authId'
            - $ref: '#/components/parameters/secretType'
         requestBody:
            description: Updated device credentials set
            content:
               application/json:
                  schema:
                     $ref: '#/components/schemas/Credentials'
            required: true
         responses:
            204:
               description: device credentials updated
            400:
               description: malformed request
            403:
               description: operation not allowed
            404:
               description: device or credentials set not found

   /credentials/{tenant}:
      post:
         tags:
            - credentials
         summary: Create new device registration
         operationId: createCredentialsSet
         parameters:
            - $ref: '#/components/parameters/tenant'
         requestBody:
            description: New device credentials set
            content:
               application/json:
                  schema:
                     $ref: '#/components/schemas/CredentialsGet'
            required: true
         responses:
            201:
               description: credentials set
            400:
               description: malformed request

   /credentials/{tenant}/{deviceId}:
      get:
         tags:
            - credentials
         summary: Get device credentials
         operationId: getCredentials
         parameters:
            - $ref: '#/components/parameters/tenant'
            - $ref: '#/components/parameters/deviceId'
         responses:
            200:
               description: operation successful
               content:
                  application/json:
                     schema:
                        $ref: '#/components/schemas/CredentialsGet'
            400:
               description: malformed request
            403:
               description: operation not allowed
            404:
               description: device not found

      delete:
         tags:
            - credentials
         summary: Delete all device credentials
         operationId: deleteCredentials
         parameters:
            - $ref: '#/components/parameters/tenant'
            - $ref: '#/components/parameters/deviceId'
         responses:
            204:
               description: device deleted
            403:
               description: operation not allowed
            404:
               description: device not found

components:
   schemas:

      TenantCreate:
         type: object
         additionalProperties: true
         required:
            - tenant-id
         properties:
            "tenant-id":
               type: string

      TenantData:
         type: object
         additionalProperties: true

      RegistrationCreate:
         type: object
         additionalProperties: true
         required:
            - device-id
         properties:
            "device-id":
               type: string

      RegistrationGet:
         type: object
         properties:
            "device-id":
               type: string 
            "data":
               $ref: '#/components/schemas/RegistrationData'

      RegistrationData:
         type: object
         additionalProperties: true

      CredentialsGet:
         type: object
         properties:
            "total":
               type: integer
            "credentials":
               type: array
               items:
                  $ref: '#/components/schemas/Credentials'

      CredentialsCommon:
         type: object
         required:
            - device-id
            - type
            - auth-id
         properties:
            "device-id":
               type: string
            "type":
               type: string
            "auth-id":
               type: string
            "enabled":
               type: boolean

      Credentials:
         oneOf:
            - $ref: '#/components/schemas/PasswordCredentials'
            - $ref: '#/components/schemas/X509Credentials'
            - $ref: '#/components/schemas/PSKCredentials'
         discriminator:
            propertyName: type
            mapping:
               psk: '#/components/schemas/PSKCredentials'
               hashed-password: '#/components/schemas/PasswordCredentials'
               x509-cert: '#/components/schemas/X509Credentials'

      PasswordCredentials:
         allOf:
            - $ref: '#/components/schemas/CredentialsCommon'
            - type: object
              properties:
                 "secrets":
                    type: array
                    items:
                       $ref: '#/components/schemas/PasswordSecret'

      CommonSecret:
         type: object
         properties:
            "not-before":
               type: string
               format: date-time
            "not-after":
               type: string
               format: date-time
            "comment":
               type: string

      PasswordSecret:
         allOf:
            - $ref: '#/components/schemas/CommonSecret'
            - type: object
              properties:
                 "hash-function":
                    type: string
                 "pwd-hash":
                    type: string
                    format: byte
                 "salt":
                    type: string
                    format: byte

      X509Credentials:
         allOf:
            - $ref: '#/components/schemas/CredentialsCommon'
            - type: object
              properties:
                 "secrets":
                    type: array
                    items:
                       $ref: '#/components/schemas/CommonSecret'

      PSKCredentials:
         allOf:
            - $ref: '#/components/schemas/CredentialsCommon'
            - type: object
              properties:
                 "secrets":
                    type: array
                    items:
                       $ref: '#/components/schemas/PSKSecret'

      PSKSecret:
         allOf:
            - $ref: '#/components/schemas/CommonSecret'
            - type: object
              required:
                 - key
              properties:
                 "key":
                    type: string
                    format: byte

   parameters:
      tenant:
         name: tenant
         in: path
         description: The tenant name
         required: true
         schema:
            type: string
         example: DEFAULT_TENANT
      deviceId:
         name: deviceId
         in: path
         description: The ID of the device
         required: true
         schema:
            type: string
         example: 4711
      authId:
         name: authId
         in: path
         description: The authentication ID of the device
         required: true
         schema:
            type: string
         example: sensor1
      secretType:
         name: secretType
         in: path
         description: The type of secret
         required: true
         schema:
            type: string
         example: hashed-password
